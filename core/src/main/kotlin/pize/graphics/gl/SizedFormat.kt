package pize.graphics.gl

import org.lwjgl.opengl.*

enum class SizedFormat(val GL: Int, val base: Format) {
    // COLOR
    R8(GL30.GL_R8, Format.RED),
    R8_SNORM(GL31.GL_R8_SNORM, Format.RED),
    R16(GL30.GL_R16, Format.RED),
    R16_SNORM(GL31.GL_R16_SNORM, Format.RED),
    R8I(GL30.GL_R8I, Format.RED),
    R8UI(GL30.GL_R8UI, Format.RED),
    R16I(GL30.GL_R16I, Format.RED),
    R16UI(GL30.GL_R16UI, Format.RED),
    R32I(GL30.GL_R32I, Format.RED),
    R32UI(GL30.GL_R32UI, Format.RED),
    R16F(GL30.GL_R16F, Format.RED),
    R32F(GL30.GL_R32F, Format.RED),
    RG8(GL30.GL_RG8, Format.RG),
    RG8_SNORM(GL31.GL_RG8_SNORM, Format.RG),
    RG16(GL30.GL_RG16, Format.RG),
    RG16_SNORM(GL31.GL_RG16_SNORM, Format.RG),
    RG16F(GL30.GL_RG16F, Format.RG),
    RG32F(GL30.GL_RG32F, Format.RG),
    RG8I(GL30.GL_RG8I, Format.RG),
    RG8UI(GL30.GL_RG8UI, Format.RG),
    RG16I(GL30.GL_RG16I, Format.RG),
    RG16UI(GL30.GL_RG16UI, Format.RG),
    RG32I(GL30.GL_RG32I, Format.RG),
    RG32UI(GL30.GL_RG32UI, Format.RG),
    R3_G3_B2(GL11.GL_R3_G3_B2, Format.RGB),
    RGB4(GL11.GL_RGB4, Format.RGB),
    RGB5(GL11.GL_RGB5, Format.RGB),
    RGB8(GL11.GL_RGB8, Format.RGB),
    RGB8_SNORM(GL31.GL_RGB8_SNORM, Format.RGB),
    RGB10(GL11.GL_RGB10, Format.RGB),
    RGB12(GL11.GL_RGB12, Format.RGB),
    RGB16(GL11.GL_RGB16, Format.RGB),
    RGB16_SNORM(GL31.GL_RGB16_SNORM, Format.RGB),
    SRGB8(GL21.GL_SRGB8, Format.RGB),
    RGB16F(GL30.GL_RGB16F, Format.RGB),
    RGB32F(GL30.GL_RGB32F, Format.RGB),
    R11F_G11F_B10F(GL30.GL_R11F_G11F_B10F, Format.RGB),
    RGB9_E5(GL30.GL_RGB9_E5, Format.RGB),
    RGB8I(GL30.GL_RGB8I, Format.RGB),
    RGB8UI(GL30.GL_RGB8UI, Format.RGB),
    RGB16I(GL30.GL_RGB16I, Format.RGB),
    RGB16UI(GL30.GL_RGB16UI, Format.RGB),
    RGB32I(GL30.GL_RGB32I, Format.RGB),
    RGB32UI(GL30.GL_RGB32UI, Format.RGB),
    RGB10_A2UI(GL33.GL_RGB10_A2UI, Format.RGB),
    RGBA2(GL11.GL_RGBA2, Format.RGBA),
    RGBA4(GL11.GL_RGBA4, Format.RGBA),
    RGB5_A1(GL11.GL_RGB5_A1, Format.RGBA),
    RGBA8(GL11.GL_RGBA8, Format.RGBA),
    RGBA8_SNORM(GL31.GL_RGBA8_SNORM, Format.RGBA),
    RGB10_A2(GL11.GL_RGB10_A2, Format.RGBA),
    RGBA12(GL11.GL_RGBA12, Format.RGBA),
    RGBA16(GL11.GL_RGBA16, Format.RGBA),
    RGBA16_SNORM(GL31.GL_RGBA16_SNORM, Format.RGBA),
    SRGB8_ALPHA8(GL21.GL_SRGB8_ALPHA8, Format.RGBA),
    RGBA16F(GL30.GL_RGBA16F, Format.RGBA),
    RGBA32F(GL30.GL_RGBA32F, Format.RGBA),
    RGBA8I(GL30.GL_RGBA8I, Format.RGBA),
    RGBA8UI(GL30.GL_RGBA8UI, Format.RGBA),
    RGBA16I(GL30.GL_RGBA16I, Format.RGBA),
    RGBA16UI(GL30.GL_RGBA16UI, Format.RGBA),
    RGBA32I(GL30.GL_RGBA32I, Format.RGBA),
    RGBA32UI(GL30.GL_RGBA32UI, Format.RGBA),

    // DEPTH AND STENCIL
    DEPTH_COMPONENT16(GL14.GL_DEPTH_COMPONENT16, Format.DEPTH_COMPONENT),
    DEPTH_COMPONENT24(GL14.GL_DEPTH_COMPONENT24, Format.DEPTH_COMPONENT),
    DEPTH_COMPONENT32(GL14.GL_DEPTH_COMPONENT32, Format.DEPTH_COMPONENT),
    DEPTH_COMPONENT32F(GL30.GL_DEPTH_COMPONENT32F, Format.DEPTH_COMPONENT),
    DEPTH24_STENCIL8(GL30.GL_DEPTH24_STENCIL8, Format.DEPTH_STENCIL),
    DEPTH32F_STENCIL8(GL30.GL_DEPTH32F_STENCIL8, Format.DEPTH_STENCIL),

    // COMPRESSED
    COMPRESSED_RED(GL30.GL_COMPRESSED_RED, Format.RED),
    COMPRESSED_RED_RGTC1(GL30.GL_COMPRESSED_RED_RGTC1, Format.RED),
    COMPRESSED_SIGNED_RED_RGTC1(GL30.GL_COMPRESSED_SIGNED_RED_RGTC1, Format.RED),
    COMPRESSED_RG(GL30.GL_COMPRESSED_RG, Format.RG),
    COMPRESSED_RG_RGTC2(GL30.GL_COMPRESSED_RG_RGTC2, Format.RG),
    COMPRESSED_SIGNED_RG_RGTC2(GL30.GL_COMPRESSED_SIGNED_RG_RGTC2, Format.RG),
    COMPRESSED_RGB(GL13.GL_COMPRESSED_RGB, Format.RGB),
    COMPRESSED_RGB_BPTC_SIGNED_FLOAT(GL42.GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, Format.RGB),
    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT(GL42.GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, Format.RGB),
    COMPRESSED_SRGB(GL21.GL_COMPRESSED_SRGB, Format.RGB),
    COMPRESSED_RGBA(GL13.GL_COMPRESSED_RGBA, Format.RGBA),
    COMPRESSED_RGBA_BPTC_UNORM(GL42.GL_COMPRESSED_RGBA_BPTC_UNORM, Format.RGBA),
    COMPRESSED_SRGB_ALPHA(GL21.GL_COMPRESSED_SRGB_ALPHA, Format.RGBA),
    COMPRESSED_SRGB_ALPHA_BPTC_UNORM(GL42.GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, Format.RGB);

    val channels: Int
        get() = base.channels
}
